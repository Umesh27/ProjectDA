__author__ = 'Umesh''''facechop.py-Takes an image and detects a face in it.-For each face, an image file is generated    -the images are strictly of the faces'''from skimage.measure import compare_ssimimport imutils, osimport numpy as npimport cv2.cv2 as cv2def get_diff(imPath1, imPath2, parentPath = ""):    if isinstance(imPath1, str):        parentPath = os.path.split(imPath1)[0]        # load the two input images        imageA = cv2.imread(imPath1)        imageB = cv2.imread(imPath2)    else:        imageA = imPath1        imageB = imPath2    # convert the images to grayscale    grayA = cv2.cvtColor(imageA, cv2.COLOR_BGR2GRAY)    grayB = cv2.cvtColor(imageB, cv2.COLOR_BGR2GRAY)    # show the output images    cv2.imshow("grayA", grayA)    cv2.imshow("grayB", grayB)    #    #  compute the Structural Similarity Index (SSIM) between the two    # images, ensuring that the difference image is returned    (score, diff1) = compare_ssim(grayA, grayB, full=True)    diff = (diff1 * 255).astype("uint8")    print("type of grayA", type(grayA))    print("type of diff", type(diff1))    outcsv = os.path.join(parentPath, "out_diff.csv")    print(outcsv)    np.savetxt(outcsv, diff, delimiter=',')    # threshold the difference image, followed by finding contours to    # obtain the regions of the two input images that differ    thresh = cv2.threshold(diff, 0, 255, cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)[1]    cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)    cnts = cnts[0] if imutils.is_cv2() else cnts[1]    print(len(cnts))    cnts = [cnts[-1]]    # loop over the contours    for c in cnts:        # compute the bounding box of the contour and then draw the        # bounding box on both input images to represent where the two        # images differ        (x, y, w, h) = cv2.boundingRect(c)        print(x, y, w, h)        cv2.rectangle(imageA, (x, y), (x + w, y + h), (0, 0, 255), 2)        cv2.rectangle(imageB, (x, y), (x + w, y + h), (0, 0, 255), 2)    # cv2.imshow("Diff", diff)    # #cv2.imshow("image_from_array", image_from_array)    # cv2.imshow("Thresh", thresh)    # cv2.waitKey(0)    return diffdef crop_image(image_path):    img = cv2.imread(image_path)    crop_img = img[100:350, 100:450] # Crop from x, y, w, h -> 100, 200, 300, 400    # NOTE: its img[y: y + h, x: x + w] and *not* img[x: x + w, y: y + h]    # cv2.imshow("cropped", crop_img)    # cv2.waitKey(0)    return crop_imgdef get_bw(image_path):    """    :param image_path:    :return:    """    if isinstance(image_path, str):        im_gray = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)#cv2.CV_LOAD_IMAGE_GRAYSCALE)    else:        im_gray = cv2.cvtColor(image_path, cv2.COLOR_BGR2GRAY)    (thresh, im_bw) = cv2.threshold(im_gray, 128, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)    im_bw = cv2.threshold(im_gray, thresh, 255, cv2.THRESH_BINARY)[1]    return im_bwif __name__ == '__main__':    parentDir = r"D:\Umesh\LSPP\1Aug\DataAnalysis\DeepLearning"    # imagePath1 = r"D:\Umesh\LSPP\1Aug\DataAnalysis\ProjectDA\Images\118_case769_front_Top_Bottom_0.jpg"    # imagePath2 = r"D:\Umesh\LSPP\1Aug\DataAnalysis\ProjectDA\Images\118_case769_front_Top_Bottom_-1.jpg"    imagePath1 = os.path.join(parentDir, "front_face_front_0.jpg")    imagePath2 = os.path.join(parentDir, "front_face_front_-1.png")    # get_diff(imagePath1, imagePath2, parentPath=parentDir)    cropIm1 = crop_image(imagePath1)    cropIm2 = crop_image(imagePath2)    cropIm1_bw = get_bw(cropIm1)    print(cropIm1_bw.shape)    #exit()    # img1_bw = os.path.join(parentDir, "image1_bw.csv")    # np.savetxt(img1_bw, cropIm1_bw, delimiter=',')    cropIm2_bw = get_bw(cropIm2)    # img2_bw = os.path.join(parentDir, "image2_bw.csv")    # np.savetxt(img2_bw, cropIm2_bw, delimiter=',')    # diff1 = get_diff(cropIm1, cropIm2, parentPath=parentDir)    diff1 = get_diff(cropIm1, cropIm2, parentPath=parentDir)    cv2.imshow("crop1", cropIm1)    cv2.imshow("crop1_bw", cropIm1_bw)    cv2.imshow("crop2", cropIm2)    cv2.imshow("crop2_bw", cropIm2_bw)    cv2.imshow('diff1',diff1)    cv2.waitKey(0)